<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard1.5;net452</TargetFrameworks>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <Version>5.0.4-alpha</Version>
    <AssemblyVersion>5.0.0.4</AssemblyVersion>
    <FileVersion>5.0.0.4</FileVersion>
    <Company>Domain</Company>
    <Authors>Kazi Zahir</Authors>
    <Description>provides a distributed Redis implementation of the IRateLimitingCacheProvider from the Domain.RateLimiting.Core package meaning that it can be used from multiple servers which is more suiting to real production environments. This is the package that keeps track of the call count per time window and gives a go or no go based on the number of calls made so far. The libraries in this repo provide distributed implementations of rate limiting using Redis for the following algorithms:

* SteppingTimeWindow
* SlidingTimeWindow
* LeakyBucket

You can even add your own implementation by implementing the IRateLimitingCacheProvider.</Description>
    <PackageIconUrl>http://www.domain.com.au/content/files/99x99.png</PackageIconUrl>
    <RepositoryUrl>https://github.com/DomainGroupOSS/domain-rate-limiting.git</RepositoryUrl>
    <PackageTags>ratelimiting, rate limiting, throttling, API throttling, request throttling, redis, ratelimiting redis</PackageTags>
    <AssemblyName>Domain.RateLimiting.Redis</AssemblyName>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="StackExchange.Redis" Version="1.2.3" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Domain.RateLimiting.Core\Domain.RateLimiting.Core.csproj" />
  </ItemGroup>
</Project>